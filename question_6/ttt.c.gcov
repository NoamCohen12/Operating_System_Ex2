        -:    0:Source:ttt.c
        -:    0:Graph:ttt.gcno
        -:    0:Data:ttt.gcda
        -:    0:Runs:10
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:#include <stdbool.h>
        -:    5:
       46:    6:void print_matrix(char matrix[3][3])
        -:    7:{
       46:    8:    printf("-------------\n"); // Top border
      184:    9:    for (size_t i = 0; i < 3; i++)
        -:   10:    {
      552:   11:        for (size_t j = 0; j < 3; j++)
        -:   12:        {
      414:   13:            printf("| %c ", matrix[i][j]);
        -:   14:        }
      138:   15:        printf("|\n");
      138:   16:        printf("-------------\n"); // Separator between rows
        -:   17:    }
       46:   18:    fflush(stdout);
       46:   19:}
        -:   20:
       48:   21:char check_winner(char matrix[3][3])
        -:   22:{
        -:   23:    // Check rows
      141:   24:    for (int i = 0; i < 3; i++)
        -:   25:    {
      125:   26:        if (matrix[i][0] == matrix[i][1] && matrix[i][1] == matrix[i][2] && matrix[i][0] != '0')
        -:   27:        {
       32:   28:            return matrix[i][0];
        -:   29:        }
        -:   30:    }
        -:   31:
        -:   32:    // Check columns
       63:   33:    for (int i = 0; i < 3; i++)
        -:   34:    {
       48:   35:        if (matrix[0][i] == matrix[1][i] && matrix[1][i] == matrix[2][i] && matrix[0][i] != '0')
        -:   36:        {
        1:   37:            return matrix[0][i];
        -:   38:        }
        -:   39:    }
        -:   40:
        -:   41:    // Check diagonals
       15:   42:    if (matrix[0][0] == matrix[1][1] && matrix[1][1] == matrix[2][2] && matrix[0][0] != '0')
        -:   43:    {
        5:   44:        return matrix[0][0];
        -:   45:    }
       10:   46:    if (matrix[0][2] == matrix[1][1] && matrix[1][1] == matrix[2][0] && matrix[0][2] != '0')
        -:   47:    {
        1:   48:        return matrix[0][2];
        -:   49:    }
        -:   50:
        -:   51:    // No winner
        9:   52:    return '0';
        -:   53:}
        -:   54:
        9:   55:void check_invalid_input(char *string_num)
        -:   56:{
        9:   57:    int arr[10] = {0};
        9:   58:    int length = strlen(string_num);
        -:   59:    // check if all number between 1-9 only one represent and not represet 0 in a argv
        9:   60:    if (strlen(string_num) != 9)
        -:   61:    {
        1:   62:        printf("You must enter 9 numbers\n");
        1:   63:        exit(1);
        -:   64:    }
        -:   65:
       79:   66:    for (size_t i = 0; i < length; i++)
        -:   67:    {
       72:   68:        if (string_num[i] < '1' || string_num[i] > '9')
        -:   69:        {
        1:   70:            printf("Each number need to be between 1-9\n");
        1:   71:            exit(1);
        -:   72:        }
        -:   73:
       71:   74:        arr[string_num[i] - '0']++;
        -:   75:    }
        -:   76:
        -:   77:    // if (arr[0] > 0)
        -:   78:    // {
        -:   79:    //     printf("Do not enter the number 0\n");
        -:   80:    //     exit(1);
        -:   81:    // }
        -:   82:
       55:   83:    for (size_t i = 1; i < length; i++)
        -:   84:    {
       49:   85:        if (arr[i] != 1)
        -:   86:        {
        1:   87:            printf("Your input needs to include numbers between 1-9, each number once \n");
        1:   88:            exit(1);
        -:   89:        }
        -:   90:    }
        6:   91:}
        -:   92:
       10:   93:int main(int argc, char *argv[])
        -:   94:{
       10:   95:    if (argc != 2)
        -:   96:    {
        1:   97:        printf("You must enter in this format: ./ttt <strategy>\n");
        1:   98:        printf("\n");
        1:   99:        exit(1);
        -:  100:    }
        9:  101:    check_invalid_input(argv[1]);                                            // check if the input is valid
        6:  102:    char *strategy = argv[1];                                                // get the strategy
        6:  103:    char matrix[3][3] = {{' ', ' ', ' '}, {' ', ' ', ' '}, {' ', ' ', ' '}}; // Create a matrix 3x3 with spaces
        6:  104:    int count_of_place_empty = 0;                                            // count the number of empty place
        6:  105:    bool my_turn = true;
        -:  106:    char my_choice;
        -:  107:
       37:  108:    for (size_t i = 0; i < 9; i++)
        -:  109:    {
       37:  110:        int c_pos = strategy[i] - '1'; // Convert character to index
        -:  111:
       37:  112:        my_turn = true;
       37:  113:        if (count_of_place_empty < 8)
        -:  114:        {
        -:  115:
       34:  116:            if (matrix[c_pos / 3][c_pos % 3] == ' ')
        -:  117:            {
       22:  118:                matrix[c_pos / 3][c_pos % 3] = 'X'; /// 1-1=0
       22:  119:                printf("Computer chose: (%d,%d)\n", c_pos / 3 + 1, c_pos % 3 + 1);
       22:  120:                print_matrix(matrix);
       22:  121:                if (check_winner(matrix) == 'X')
        -:  122:                {
        1:  123:                    printf("win\n");
        1:  124:                    exit(0);
        -:  125:                }
        -:  126:               
       21:  127:                count_of_place_empty++;
        -:  128:            }
        -:  129:            else
        -:  130:            {
       12:  131:                continue;
        -:  132:            }
        -:  133:        }
        -:  134:        else
        -:  135:        {
        3:  136:            printf("count of place empty:%d",count_of_place_empty);
     7609:  137:            for (size_t i = 8; i >= 0; i--)
        -:  138:            {
     7609:  139:                if (matrix[strategy[i] / 3][strategy[i] % 3] == ' ')
        -:  140:                {
        3:  141:                    matrix[strategy[i] / 3][strategy[i] % 3] = 'X'; /// 1-1=0
        3:  142:                    printf("Computer chose: (%d,%d)\n", c_pos / 3 + 1, c_pos % 3 + 1);
        3:  143:                    print_matrix(matrix);
        3:  144:                    if (check_winner(matrix) == '0')
        -:  145:                    {
        1:  146:                        printf("draw\n");
        1:  147:                        exit(0);
        -:  148:                    }
        2:  149:                    if (check_winner(matrix) == 'X')
        -:  150:                    {
        2:  151:                        printf("win\n");
        2:  152:                        exit(0);
        -:  153:                    }
        -:  154:                    // if (check_winner(matrix) == 'O')
        -:  155:                    // {
        -:  156:                    //     printf("lost\n");
        -:  157:                    //     exit(0);
        -:  158:                    // }
        -:  159:                }
        -:  160:            }
        -:  161:        }
        -:  162:
       59:  163:        while (my_turn)
        -:  164:        {
       40:  165:            if (scanf("%c", &my_choice) == 1)
        -:  166:
        -:  167:            {
       40:  168:                int user_pos = my_choice - '1';
        -:  169:
       40:  170:                if ((my_choice > '0' && my_choice <= '9' && matrix[user_pos / 3][user_pos % 3] == ' '))
        -:  171:                {
       21:  172:                    matrix[user_pos / 3][user_pos % 3] = 'O';
       21:  173:                    printf("You chose: (%d,%d)\n", user_pos / 3 + 1, user_pos % 3 + 1);
       21:  174:                    print_matrix(matrix);
       21:  175:                    if (check_winner(matrix) == 'O')
        -:  176:                    {
        2:  177:                        printf("lost\n");
        2:  178:                        exit(0);
        -:  179:                    }
       19:  180:                    count_of_place_empty++;
       19:  181:                    my_turn = false;
        -:  182:                }
       19:  183:                else if (my_choice > '0' && my_choice <= '9' && matrix[user_pos / 3][user_pos % 3] != ' ')
        -:  184:                {
        2:  185:                    printf("You entered a number that is already taken\n");
        2:  186:                        fflush(stdout);
        -:  187:
        -:  188:                }
        -:  189:            }
        -:  190:            else
        -:  191:            {
    #####:  192:                printf("please enter one number\n");
    #####:  193:                    fflush(stdout);
        -:  194:
        -:  195:            }
        -:  196:        }
        -:  197:    }
        -:  198:
        -:  199:}
